// Element that should have ripple effect needs to have position: relative
// Position relative may be also set up on any parent element if it has the same size
// as the element with ripple effect
function createRipple(event) {
    const button = event.currentTarget;

    const circle = document.createElement('span');
    const diameter = Math.max(button.clientWidth, button.clientHeight);
    const radius = diameter / 2;

    const rect = button.getBoundingClientRect();

    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${event.clientX - rect.left - radius}px`;
    circle.style.top = `${event.clientY - rect.top - button.offsetTop - radius}px`;
    circle.classList.add('ripple');

    const ripple = button.getElementsByClassName('ripple')[0];

    if (ripple) {
        ripple.remove();
    }

    button.appendChild(circle);
}

export function mountRippleEffect() {
    const buttons = document.querySelectorAll('button.accordion-button');
    for (const button of buttons) {
        button.addEventListener('click', createRipple);
    }

    // Create a MutationObserver instance
    const observer = new MutationObserver((mutationsList, observer) => {
        // Look through all mutations that just occured
        for (let mutation of mutationsList) {
            // If the addedNodes property has one or more nodes
            for (let node of mutation.addedNodes) {
                // If the added node is a button.accordion-button
                if (node.nodeName === 'BUTTON' && node.classList.contains('accordion-button')) {
                    node.addEventListener('click', createRipple);
                }
                // If the added node contains any button.accordion-button elements
                else if (node instanceof HTMLElement) {
                    const buttons = node.querySelectorAll('button.accordion-button');
                    for (const button of buttons) {
                        button.addEventListener('click', createRipple);
                    }
                }
            }
        }
    });

    // Start observing the document with the configured parameters
    observer.observe(document, { childList: true, subtree: true });
}
